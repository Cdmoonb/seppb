<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "mybatis-3-mapper.dtd">

<!-- 该xml需先在mybatis.xml中注册 -->
<mapper namespace="com.pr.sepp.sep.build.dao.SonarDAO">
    <insert id="insertSonarScan"   parameterType="com.pr.sepp.sep.build.model.sonar.SonarScanReq">
        insert into sepp_sonar_scan
            (note_id, git_branch,product_id,instance,project_key, submitter,project_version,start_time,result_id)
        values
            (#{noteId},#{gitBranch},#{productId},#{instanceName},#{projectKey}, #{submitter},#{projectVersion},#{startTime},'0')
    </insert>

    <!-- 扫描开始时间距今大于一天，未同步成功的项目 不再同步-->
    <select id="listUnSyncProject" resultType="com.pr.sepp.sep.build.model.sonar.SonarScan">
        SELECT
            id,
            note_id AS noteId,
            project_key AS projectKey,
            project_version  AS projectVersion,
            result_id AS resultId,
            start_time AS startTime
        FROM
            sepp_sonar_scan
        WHERE result_id = 0
          and TIMESTAMPDIFF(HOUR,start_time,now())  <![CDATA[ <= ]]> 24
    </select>
    <select id="listSonarProjectNames" resultType="com.pr.sepp.sep.build.model.sonar.SonarProjectNames">
        SELECT  DISTINCT
            F.instance,
            F.param_value AS paramValue,
            BI.`project_name`AS  projectName
        FROM
            sepp_build_files F,
            sepp_build_instance BI
        WHERE F.`instance` = BI.`instance`
          AND F.note_id = #{noteID}
    </select>

    <select id="listInstance" resultType="com.pr.sepp.sep.build.model.sonar.SonarReqInstance">
        SELECT
            instance,
            project_name projectName,
            repo_url repoUrl,
            namespace,
            description
        FROM
            sepp_build_instance
        WHERE product_id =  #{productId}
    </select>



    <select id="ListAllSonarScanHistory" parameterType="java.lang.Integer" resultType="com.pr.sepp.sep.build.model.sonar.SonarScanHistory">
        SELECT
            R.id,
            U.`user_name` AS submitter,
            S.note_id AS noteId,
            S.start_time AS startTime,
            S.project_key AS projectKey,
            S.instance AS instanceName,
            S.`project_version` AS projectVersion,
            S.git_branch AS gitBranch,
            R.analysis_status AS analysisStatus,
            R.ncloc,
            R.coverage,
            R.hotspots,
            R.duplicated_lines_density AS duplicatedLinesDensity,
            R.code_smells  AS codeSmells,
            R.bugs,
            R.vulnerabilities,
            ROUND(R.sqale_index/60) AS sqaleIndex
        FROM
            sepp_user U,
            sepp_sonar_scan S
        LEFT JOIN
            sepp_sonar_result R
            ON R.id = S.`result_id`
        WHERE
            S.submitter =U.`user_id`
        AND S.product_id =  #{productId}
        <choose>
            <when test="projectKey!=null and projectKey!=''">
                AND S.project_key =  #{projectKey}
            </when>
            <when test="projectKey=null">
                AND 1 =  1
            </when>
        </choose>
        ORDER BY startTime desc
    </select>

    <update id="syncProjectSuccess" >
        UPDATE
            sepp_sonar_scan
        SET
            result_id = #{id}
        WHERE
            id =#{scanId}
    </update>

    <insert id="insertSonarResult"    useGeneratedKeys="true"   parameterType="com.pr.sepp.sep.build.model.sonar.SonarResult">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select last_insert_id()
        </selectKey>
        insert into sepp_sonar_result
            (project_key,project_version,scan_date,analysis_id,analysis_status,ncloc,coverage,hotspots,duplicated_lines_density,code_smells,bugs ,vulnerabilities ,sqale_index )
        values
            (#{projectKey},#{projectVersion}, #{scanDate}, #{key},#{analysisStatus},#{ncloc},#{coverage},#{hotspots},#{duplicatedLinesDensity},#{codeSmells},#{bugs},#{vulnerabilities},#{sqaleIndex})
    </insert>

</mapper>