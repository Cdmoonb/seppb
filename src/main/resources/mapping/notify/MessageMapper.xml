<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "mybatis-3-mapper.dtd">

<mapper namespace="com.pr.sepp.notify.message.dao.MessageDAO">

    <select id="mailNotSentQuery" resultType="com.pr.sepp.notify.message.model.MessageMail">
        SELECT mf.id,
               m.title,
               m.content,
               m.created_date AS createdDate,
               m.object_type  AS objectType,
               o.type_name    AS objectTypeName,
               m.object_id    AS objectId,
               mf.creator,
               mf.is_sent     AS isSent,
               m.product_id   AS productId,
               p.product_name AS productName,
               u1.user_name   AS creatorName,
               u2.user_name   AS userName,
               u2.user_email  AS userEmail
        FROM sepp_message_flow mf,
             sepp_message m,
             sepp_user u1,
             sepp_user u2,
             sepp_object_type o,
             sepp_product p
        WHERE mf.user_id != mf.creator
          AND mf.message_id = m.id
          AND u1.user_id = mf.creator
          AND u2.user_id = mf.user_id
          AND u2.is_valid = 'Y'
        <if test="list!=null">
            AND mf.user_id in
            <foreach collection="list" index="index" item="userId" open="(" separator="," close=")">
                #{userId}
            </foreach>
        </if>
          AND p.product_id = m.product_id
          AND o.type_id = m.object_type
          AND mf.type = 2
          AND mf.is_sent is false
        ORDER BY mf.created_date DESC
        LIMIT 20
    </select>

    <select id="findMessagesByUser" resultType="com.pr.sepp.notify.message.model.resp.MessageResp">
        SELECT
            mf.id,
            m.title,
            m.content,
            m.created_date createdDate,
            m.object_type AS objectType,
            o.type_name AS objectTypeName,
            m.object_id AS objectId,
            mf.creator,
            mf.is_sent isSent,
            m.product_id,
            u.user_name AS userName
        FROM
            sepp_message_flow mf,
            sepp_message m,
            sepp_user u,
            sepp_object_type o
        WHERE mf.user_id = #{messageQuery.userId}
          AND mf.is_read = #{messageQuery.isRead}
          AND mf.user_id != mf.creator
          AND mf.message_id = m.id
          AND u.user_id = mf.creator
          AND o.type_id = m.object_type
          AND m.product_id = #{messageQuery.productId}
          and mf.type = 1
            <if test="messageQuery.objectType!=null and messageQuery.objectType !=''">
                AND m.object_type=#{messageQuery.objectType}
            </if>
            <if test="messageQuery.messageFrom!=null and messageQuery.messageFrom!=''">
                AND mf.creator=#{messageQuery.messageFrom}
            </if>
            <if test="messageQuery.startDate !=null and messageQuery.endDate !=null">
                AND mf.created_date BETWEEN #{messageQuery.startDate} AND #{messageQuery.endDate}
            </if>
            <if test="messageQuery.messageCode !=null and messageQuery.messageCode != ''">
                AND (m.title LIKE "%"#{messageQuery.messageCode}"%" OR m.content LIKE "%"#{messageQuery.messageCode}"%")
            </if>
        ORDER BY mf.created_date DESC
    </select>

    <update id="updateMessageToHaveRead" parameterType="java.util.List">
        UPDATE sepp_message_flow SET is_read = 1 WHERE id IN
        <foreach item="item" index="index" collection="ids" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>

    <insert id="createMessage" useGeneratedKeys="true" parameterType="com.pr.sepp.notify.message.model.Message">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            select last_insert_id()
        </selectKey>
        insert into
            sepp_message(product_id, object_type, object_id, title, content)
        values
            (#{productId}, #{objectType}, #{objectId}, #{title}, #{content})
    </insert>

    <insert id="createMessageFlow" useGeneratedKeys="true" parameterType="com.pr.sepp.notify.message.model.MessageFlow">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            select last_insert_id()
        </selectKey>
        insert into
            sepp_message_flow(message_id, user_id, is_read, creator, type)
        values
            (#{messageId}, #{userId}, #{isRead}, #{creator}, #{type})
        on duplicate key update
            updated_date = now()
    </insert>

    <insert id="batchCreateMessageFlow" parameterType="java.util.List">
        insert into
            sepp_message_flow(message_id, user_id, is_read, creator, type)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.messageId}, #{item.userId}, #{item.isRead}, #{item.creator}, #{item.type})
        </foreach>
        on duplicate key update
        updated_date = now()
    </insert>

    <update id="UpdateAllMessageToHaveReadByUser">
        update sepp_message_flow
            set is_read = 1
        where user_id = #{userId}
          and is_read is false
          and type = 1
    </update>

    <update id="updateMessageDeliveryStatus">
        update sepp_message_flow
            set is_sent= 1
        where user_id = #{userId}
          and is_sent is false
          and type = #{messageType}
    </update>

    <update id="updateMailDeliveryStatus">
        update sepp_message_flow
           set is_sent = #{status}
         where id = #{id}
           and is_sent = 0
    </update>

</mapper>
